const jwt = require("jsonwebtoken");

const adminAuth = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({
        success: false,
        message: "Access token required",
      });
    }

    const token = authHeader.substring(7); // Remove "Bearer " prefix

    // Verify token (simple implementation - in production use proper JWT)
    // Accept tokens generated by admin login: "admin-token-<adminId>-<timestamp>"
    // Also keep compatibility with the old fixed token "admin-token-123".
    const isValidFixedToken = token === "admin-token-123";
    const isGeneratedToken = token.startsWith("admin-token-");

    if (isValidFixedToken || isGeneratedToken) {
      // Try to extract adminId if token is generated format
      let adminId = 1;
      if (isGeneratedToken) {
        const parts = token.split("-");
        // token structure: ["admin", "token", "<id>", "<timestamp>"]
        const maybeId = parseInt(parts[2], 10);
        if (!Number.isNaN(maybeId)) adminId = maybeId;
      }

      req.admin = {
        id: adminId,
        username: "admin",
        full_name: "Administrator",
      };
      return next();
    }

    // If token is not valid
    return res.status(401).json({
      success: false,
      message: "Invalid or expired token",
    });
  } catch (error) {
    console.error("Admin auth middleware error:", error);
    return res.status(401).json({
      success: false,
      message: "Authentication failed",
    });
  }
};

module.exports = adminAuth;
