version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: blockrights-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-blockrights123}
      MYSQL_DATABASE: ${DB_NAME:-blockrights_db}
      MYSQL_USER: ${DB_USER:-blockrights}
      MYSQL_PASSWORD: ${DB_PASSWORD:-blockrights123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./server/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - blockrights-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: blockrights-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blockrights-network

  # BlockRights Application
  app:
    build: .
    container_name: blockrights-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_USER=${DB_USER:-blockrights}
      - DB_PASSWORD=${DB_PASSWORD:-blockrights123}
      - DB_NAME=${DB_NAME:-blockrights_db}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - blockrights-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blockrights-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - blockrights-network

volumes:
  mysql_data:
  redis_data:

networks:
  blockrights-network:
    driver: bridge
